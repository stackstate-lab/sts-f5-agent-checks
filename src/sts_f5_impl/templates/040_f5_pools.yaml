etl:
  queries:
    - name: f5_pools
      query: "f5.get_ltm_object('pool', expand_subcollections=True)['items']"
      template_refs:
        - f5_pool_template
    - name: f5_pool_status
      query: "f5.get_ltm_object_stats('pool')"
      template_refs:
        - f5_pool_status_template
        - f5_pool_metrics_template
  template:
    components:
      - name: f5_pool_template
        spec:
          name: "$.name"
          type: "f5-pool"
          uid: "|'urn:f5:pool:/%s' % item['fullPath']"
          layer: "F5 Pools"
          relations: |
            relations = []
            for node in item["membersReference"].get("items", []):
              target_uid = uid('f5', 'node', node['fullPath'].rsplit(":", 1)[0])
              relations.append(target_uid)
            relations
          custom_properties:
            allowNat: "$.allowNat"
            allowSnat: "$.allowSnat"
    health:
      - name: f5_pool_status_template
        spec:
          check_id: "|'pool_%s_status' % item['entries']['tmName']['description']"
          check_name: "PoolAvailable"
          topo_identifier: "|'urn:f5:pool:/%s' % item['entries']['tmName']['description']"
          health: |
            src_status = item["entries"]["status.availabilityState"]["description"]
            "CLEAR" if src_status == "available" else "CRITICAL"
          message: "|item['entries']['status.statusReason']['description']"
    metrics:
      - name: f5_pool_metrics_template
        code: |
          component_uid = 'urn:f5:pool:/%s' % item['entries']['tmName']['description']
          usage_stats = item["entries"]
          factory.add_metric_value("f5.pool.activeMemberCnt",  usage_stats["activeMemberCnt"]["value"], target_uid=component_uid)
          factory.add_metric_value("f5.pool.availableMemberCnt",  usage_stats["availableMemberCnt"]["value"], target_uid=component_uid)
          factory.add_metric_value("f5.pool.memberCnt",  usage_stats["memberCnt"]["value"], target_uid=component_uid)
